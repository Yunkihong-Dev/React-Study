
 쿠키와 세션
        쿠키 : 브라우저에 저장되는 key-value로 이루어진 작은 데이터 파일
               서버와의 교환이 가능

               ex) session-id, auth_token
               브라우저가 닫히면 삭제, 만료 기간을 명시하면 삭제되지 않습니다.
               ex) 팝업창 3일 동안 보지 않기

        
        세션: 세션은 쿠키를 기반
              브라우저에는 session-id 해당 쿠키를 통해 서버의 인메모리에서 유저 정보를 찾아 인증
              -> 서버에 부담, httpOnly


        사용자 -> 로그인 -> 세션 ID (쿠키기반, 30분) -> API 요청 -> 사용자 인증 -> 보안o, 정보o
        -> 30분 만료 -> 세션이 만료되었습니다.


  인증 토큰
        백엔드에서 요청한 유저가 누구인지에 대한 key 값을 저장, 암호화, 프론트에 전달
        프론트는 해당 토큰을 각 요청마다 심어서 백엔드에게 요청

        백엔드가 유저 정보를 갖고 있을 필요없이, 해당 코드를 복호화하여 DB 조회를 통회
        해당 유저가 누구인지 알아내는 방식

        인증 토큰이 있다는 것은 사이트를 통해 정상적으로 접근한 유저o 

      * JWT(Json Web Token)
          json 데이터를 암호화, msa, 키만 알고있다면 어떤 서버에서든 jwt 토큰을 주고 받을 수 있음

    -------------------------------------------------------------------------------------------------

    ORM(Obejct, Relational Mapping)
        객체와 DB를 관계

        ex)
          select * from sy_user left join sy_prod as prod on prod.id = sy_user.id where sale_sattus = 0;

          User.find({
            where: {
              sale_sattus: 0
            },
            relations: {
              prod: true
            }
          }) 

      express/sequelize -> 유지보수와 레거시
      nestJS/typeORM - 현업에서 많이 볼 수 있는 조합
      prismaORM / drizzleORM

      라이브러리 설치 
        npm i mysql2 sequelize sequelize-cli

    -------------------------------------------------------------------------------------------------

    passport

        로그인, 회원가입, jwt 인증, oAuth(sns 로그인), 세션관리
        손쉽게 구현 가능하도록 만들어진 라이브러리

        npm i passport passport-local jsonwebtoken passport-jwt bcrypt
        
    -------------------------------------------------------------------------------------------------    

    회원가입/로그인 로직 구현

      1. 엔드 포인트 (URL)
        /user/sigin-in
        /user/sign-up
        /user/jwt-refresh

      2. 로직, 구현
        server -> 로그인 -> 반환 값 인증토큰 -> 유효기간 -> 리프레쉬 토큰 -> 인증 토큰 재발급

      3. input, schema, output

        id, pw
        -------
        user: {
          id int
          pw varchar
        }
        --------
        200
        - true
        400
        - '이미 있는 아이디입니다'
        - '비밀번호 양식을 지켜주세요'
        - '아이디와 비밀번호를 다시 확인해주세요'
        401,403
        - '인증 토큰이 만료'
        - '인증되지 않은 사용자'

-------------------------------------------------------------------------------------------------

  npx sequelize init

      config
        - DB 연결 설정

      models
        - 스키마 정의

      migrations
        - 테이블의 데이터 수정, 데이터 추가 및 이동

      seeders
        - 백업본

-------------------------------------------------------------------------------------------------
